

<div id="@Node.Guid" class="block-container @NodeCSS @SelectedCSS @ErrorCSS" style=@WidthCSS>
    <div class="block-container-header">    
        <div class="block-container-header-icon @Icon"></div>
        <div class="block-container-header-title"> @Node.GetDisplayName() </div>
        @if (EditCallback.HasDelegate)
        {
            <div class="block-container-header-setting icon-cog " @onclick="OpenSettings"></div>
        }
    </div>
    <div class="block-container-body-container">
        <div class="block-container-body">
            @NodeBody
            <div class="block-container-body-ports">
                <div class="block-container-port-container input">
                    @NodeInputs
                </div>
                <div class="block-container-port-container output">
                    @NodeOutputs
                </div>
            </div>
        </div>

        

    </div>
</div>

@code {



    [Parameter] public int? Width { get; set; }
    private string WidthCSS => Width != null ? $"width: {Width}px;" : string.Empty;
    [Parameter] public NodeType NodeType { get; set; } = NodeType.Logic;
    [Parameter] public string Icon { get; set; } = string.Empty;
    [Parameter] public string Name { get; set; } = string.Empty;
    [Parameter] public RenderFragment? NodeBody { get; set; }
    [Parameter] public RenderFragment? NodeInputs{ get; set; }
    [Parameter] public RenderFragment? NodeOutputs { get; set; }
    [Parameter] public bool HasSettings { get; set; } = false;
    [Parameter] public EventCallback EditCallback { get; set; }
    [Parameter] public BaseNode Node { get; set; }
    [Inject] public IJSRuntime JS { get; set; }

    private string SelectedCSS => Node.Selected ? "selected" : string.Empty;
    private string ErrorCSS => Node.Error ? "error" : string.Empty;
    private string NodeCSS => GetNodeTypeCSS();

    private string GetNodeTypeCSS()
    {
        return NodeType.ToString().ToLower();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if(JS != null)
            {
                var dimensions = await JS.InvokeAsync<Dimensions>("GetBlockDimensions", Node.Guid);
                Node.Size = new Blazor.Diagrams.Core.Geometry.Size(dimensions.Width, dimensions.Height);
                Node.Refresh();
            }
        }
    }

    private class Dimensions
    {
        public double Height { get; set; } = 0;
        public double Width { get; set; } = 0;
    }


    private async Task OpenSettings()
    {
        if (EditCallback.HasDelegate)
        {
            await EditCallback.InvokeAsync();
        }
    }


}
