@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel;
@using dOSCEngine.Components.UI
@using dOSCEngine.Engine.Units
@using dOSCEngine.Utilities;

<NodePropertyEditor Setting="@Setting" OnValidSubmit="Update" >
    <Fields>
        @if(Setting != null)
        {
            <hr />

            <div class="dosc-form-item centered" style="flex-direction:column;">

                <label><b>Calculated Delay: </b><span> @CalculatedValue </span></label>
                @if (OverMaxValue)
                {
                    <label class="subtitle"> <b>You have exceeded the maximum time you are able to delay.</b> </label>
                }
            </div> 

            <div class="dosc-form-item">
                <label>Delay Time: <span style="color:red;">*</span></label>
                <ValidationMessage For="@(() => Setting.DelayTime)"  />
                <InputNumber type="number" placeholder="100" @bind-Value=@Setting.DelayTime />
            </div>

            <div class="dosc-form-item">
                <label> Unit: </label>
                <ValidationMessage For="@(() => Setting.Unit)" />
                <InputRadioGroup @bind-Value="Setting.Unit">
                    <div class="dosc-form-row">
                        @foreach(var option in Setting.UnitOptions)
                        {
                            <div class="dosc-form-item item-row">
                                <InputRadio id="@option" Value="@option" />
                                <label for="@option">@option</label>
                            </div>
                        }
                    </div>
                </InputRadioGroup>
            </div>

            <div class="dosc-form-item">
                <label> Display Value As: </label>
                <ValidationMessage For="@(() => Setting.ShowPercent)" />
                <InputRadioGroup @bind-Value="Setting.ShowPercent">
                    <div class="dosc-form-row">
                        <div class="dosc-form-item item-row">
                            <InputRadio id="1radio" Value="true" checked="checked" />
                            <label for="1radio">Percent</label>
                        </div>

                        <div class="dosc-form-item item-row">
                            <InputRadio id="2radio" Value="false" />
                            <label for="2radio">Time Remaining</label>
                        </div>
                    </div>
                </InputRadioGroup>
            </div>

            <div class="dosc-form-item">
                <label> Show Time Remaining As: </label>
                <ValidationMessage For="@(() => Setting.ShowNumbersOnly)" />
                <InputRadioGroup @bind-Value="Setting.ShowNumbersOnly">
                    <div class="dosc-form-row">
                        <div class="dosc-form-item item-row">
                            <InputRadio id="radio-TR1" Value="false" checked="checked"/>
                            <label for="radio-TR1">Full Text</label>
                        </div>

                        <div class="dosc-form-item item-row">
                            <InputRadio id="radio-TR2" Value="true" />
                            <label for="radio-TR2">Numbers Only</label>
                        </div>
                    </div>
                </InputRadioGroup>
            </div>
            <hr/>
            <label><b>Random Range: </b></label>

            <div class="dosc-form-row">
                <div class="dosc-form-item">
                    <label> Minimum: </label>
                    <ValidationMessage For="@(() => Setting.Min)" />
                    <InputNumber type="number" placeholder="-255" @bind-Value=@Setting.Min />
                </div>
                <div class="dosc-form-item">
                    <label> Maximum: </label>
                    <ValidationMessage For="@(() => Setting.Max)" />
                    <InputNumber type="number" placeholder="255" @bind-Value=@Setting.Max />
                </div>
                <div class="dosc-form-item">
                    <label> Decimal Place Count: </label>
                    <ValidationMessage For="@(() => Setting.DecimalPlaceCount)" />
                    <InputNumber type="number" placeholder="0" @bind-Value=@Setting.DecimalPlaceCount />
                </div>
            </div>


        }
        


    </Fields>
</NodePropertyEditor>



@code{
    [CascadingParameter]
    public BaseNode? Node { get; set; }
    private NodeSetting? Setting;

    [Parameter] public EventCallback Updated { get; set; }

    bool OverMaxValue = false;

    private string CalculatedValue
    {
        get
        {
            if (Setting != null)
            {
                return BeautifyString.BeautifyMilliseconds(GetDelayTime(), Setting.ShowNumbersOnly);
            }
            else
            {
                return "Unknown";
            }
        }
    }

    private TimeSpan GetDelayTime()
    {
        long delay = Setting.DelayTime;
        TimeUnits units = Setting.Unit;
        TimeSpan ts = TimeSpan.FromMilliseconds(delay * (long)units);
        int maxDelayMilliseconds = Int32.MaxValue;
        if (ts.TotalMilliseconds > maxDelayMilliseconds)
        {
            ts = TimeSpan.FromMilliseconds(maxDelayMilliseconds);
            OverMaxValue = true;
        }
        else
        {
            OverMaxValue = false;
        }
        return ts;
    }


    protected override void OnParametersSet()
    {
        if (Node != null)
        {
            Setting = new NodeSetting(Node);
        }
    }


    private class NodeSetting : BaseNodeSetting
    {
        [DisplayName("Delay Time")]
        [Range(1, 10000, ErrorMessage = "Delay time must be between 1 and 10000")]
        [Required]
        public int DelayTime { get; set; }
        [Required]
        public TimeUnits Unit { get; set; }
        [Required]
        public bool ShowPercent { get; set; }
        [Required]
        public bool ShowNumbersOnly { get; set; }
        [Required]
        public double Max { get; set; }
        [Required]
        public double Min { get; set; }
        [Required]
        public int DecimalPlaceCount { get; set; } = 0;

        public List<TimeUnits> UnitOptions => ListUtilities.GetEnumValues<TimeUnits>();
        public NodeSetting(BaseNode Node)
        {
            DelayTime = Node.Properties.GetProperty<int>(EntityProperty.DelayTime);
            Unit = Node.Properties.GetProperty<TimeUnits>(EntityProperty.DelayTimeUnits);
            ShowPercent = Node.Properties.GetProperty<bool>(EntityProperty.ShowPercent);
            ShowNumbersOnly = Node.Properties.GetProperty<bool>(EntityProperty.ShowNumbersOnly);
            Max = Node.Properties.GetProperty<double>(EntityProperty.Max);
            Min = Node.Properties.GetProperty<double>(EntityProperty.Min);
            DecimalPlaceCount = Node.Properties.GetProperty<int>(EntityProperty.DecimalPlaceCount);
            DisplayName = Node.DisplayName;
            Name = Node.Name;
        }



    }

    public void Update(BaseNodeSetting setting)
    {
        var updatedSettings = (NodeSetting)setting;

        if (Node != null)
        {
            Node.DisplayName = updatedSettings.DisplayName;
            Node.Properties.SetProperty(EntityProperty.DelayTime, (int)updatedSettings.DelayTime);
            Node.Properties.SetProperty(EntityProperty.DelayTimeUnits, updatedSettings.Unit);
            Node.Properties.SetProperty(EntityProperty.ShowPercent, updatedSettings.ShowPercent);
            Node.Properties.SetProperty(EntityProperty.ShowNumbersOnly, updatedSettings.ShowNumbersOnly);
            Node.Properties.SetProperty(EntityProperty.Max, updatedSettings.Max);
            Node.Properties.SetProperty(EntityProperty.Min, updatedSettings.Min);
            Node.Properties.SetProperty(EntityProperty.DecimalPlaceCount, updatedSettings.DecimalPlaceCount);
        }

        if (Updated.HasDelegate)
        {
            Updated.InvokeAsync();
        }
    }

}