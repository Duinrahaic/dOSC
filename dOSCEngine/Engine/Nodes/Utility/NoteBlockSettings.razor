@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel;
@using dOSCEngine.Components.UI
@using dOSCEngine.Components.Form
@using dOSCEngine.Engine.Units
@using dOSCEngine.Utilities;

<NodePropertyEditor Setting="@Setting" OnValidSubmit="Update" >
    <Fields>
        @if(Setting != null)
        {
            <hr />
            <div class="dosc-form-item">
                <label> Note: </label>
                <label class="subtitle">For information on markdown read <a href="" @onclick:preventDefault @onclick="OpenHelp">here</a>.</label>

                <ValidationMessage For="@(() => Setting.Note)" />
                <AutoResizingNoteArea @bind-Value="@Setting.Note"/>
            </div>
            <div class="dosc-form-item">
                <label> Note Color: </label>
                <ValidationMessage For="@(() => Setting.NoteColor)" />
                <InputRadioGroup @bind-Value="Setting.NoteColor">
                    <div class="dosc-form-row row-wrap">
                        @foreach(var option in Setting.NoteColors)
                        {
                            <div class="dosc-form-item item-row">
                                <InputRadio id="@option.ToString().ToLower()" class="color-block" Value="@option.ToString().ToLower()" />
                            </div>
                        }
                    </div>
                </InputRadioGroup>
            </div>
            
        }
        


    </Fields>
</NodePropertyEditor>



@code{
    [CascadingParameter]
    public BaseNode? Node { get; set; }
    private NodeSetting? Setting;

    [Parameter] public EventCallback Updated { get; set; }
    
    protected override void OnParametersSet()
    {
        if (Node != null)
        {
            Setting = new NodeSetting(Node);
        }
    }


    private class NodeSetting : BaseNodeSetting
    {
        [Required]
        public string Note { get; set; }
        [Required]
        public string NoteColor { get; set; }
        public List<NoteColorEnum> NoteColors => ListUtilities.GetEnumValues<NoteColorEnum>();

        public enum NoteColorEnum
        {
            Red,
            Green,
            Blue,
            Yellow,
            Orange,
            Purple,
            Magenta,
            Pink,
            Black,
            Grey,
        }
        
        public NodeSetting(BaseNode node)
        {
            Note = node.Properties.GetProperty<string>(EntityPropertyEnum.Note);
            NoteColor = node.Properties.GetProperty<string>(EntityPropertyEnum.NoteColor);
            DisplayName = node.DisplayName;
            Name = node.Name;
        }



    }

    public void Update(BaseNodeSetting setting)
    {
        var updatedSettings = (NodeSetting)setting;

        if (Node != null)
        {
            Node.DisplayName = updatedSettings.DisplayName;
            Node.Properties.SetProperty(EntityPropertyEnum.Note, updatedSettings.Note.Trim());
            Node.Properties.SetProperty(EntityPropertyEnum.NoteColor, updatedSettings.NoteColor);
        }

        if (Updated.HasDelegate)
        {
            Updated.InvokeAsync();
        }
    }
    
    private void OpenHelp()
    {
        WebUtilities.OpenUrl("https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/readme.md");
    }

}