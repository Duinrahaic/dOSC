@using Blazor.Diagrams.Components.Renderers
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using System.Timers
@using dOSCEngine.Components.Inputs
@using dOSCEngine.Components.Modals
@using dOSCEngine.Engine.Helper
@using dOSCEngine.Engine.Nodes.Utility
@using dOSCEngine.Engine.Ports
@using dOSCEngine.Services
@implements IDisposable

<DefaultBlock EditCallback="EditNode" Icon="icon-clock" Node=Node >
    <NodeBody>
        <div class="label"> @VisualIndicator </div>
        <div class="dOSC-progress-bar-container">
            <div class="dOSC-progress-bar-indicator" style="width: @VisualIndicatorPercent%;" />
        </div>
        <div class="dOSC-progress-bar-container">
            <div class="dOSC-progress-bar-indicator" style="width: @VisualIndicatorPercent%;" />
        </div>
    </NodeBody>
    <NodeInputs>
        <div class="item">
            <div class="label">Input</div>
            <PortRenderer Class="port numeric" Port="this.Node.Ports[0]" />
        </div>
    </NodeInputs>
    <NodeOutputs>
        <div class="item">
            <div class="label">Output</div>
            <PortValueLabel LabelPosition=PortValueLabel.Position.Right DisplayValue="this.Node.Value" />
            <PortRenderer Class="port numeric" Port="this.Node.Ports[1]" />
        </div>
    </NodeOutputs>
</DefaultBlock>


 
 
@code
{
    [Parameter] public DelayNode Node { get; set; }
    [Inject] public ServiceBundle? SB { get; set; }

    private System.Timers.Timer UpdateTimer = new();
    private string VisualIndicator = "Waiting";
    private double VisualIndicatorPercent = 0;
    protected override void OnInitialized()
    {
        if(SB != null)
        {
            SB.OnNodeUpdate += OnUpdate;
        }

        if (Node != null)
        {
            UpdateTimer.AutoReset = true;
            UpdateTimer.Interval = 100;
            UpdateTimer.Elapsed += UpdateVisuals;
            UpdateTimer.Start();
        }

    }

    private void OnUpdate(BaseNode node)
    {
        if(node.Guid == Node.Guid)
        {
            var n = (DelayNode)node;
            Node.Properties = n.Properties;
            this.StateHasChanged();
        }
    }

    private void UpdateVisuals(object? sender, ElapsedEventArgs e)
    {
        VisualIndicatorPercent = Node?.CalculateRemainingPercent() ?? 0;
        VisualIndicator = Node?.IndicatorToString() ?? "Unknown"; 
        InvokeAsync(() =>
        {
            StateHasChanged();
        }).ConfigureAwait(false);
    }

    private void EditNode()
    {
        SB?.EditNode(Node);
    }

    public void Dispose()
    {
        if (SB != null)
        {
            UpdateTimer.Elapsed -= UpdateVisuals;
            UpdateTimer.Dispose();
        }
    }


}