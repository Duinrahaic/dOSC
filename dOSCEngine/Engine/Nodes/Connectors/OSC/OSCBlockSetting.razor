@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel;
@using dOSCEngine.Components.UI
@using dOSCEngine.Engine.Units
@using dOSCEngine.Utilities;

<NodePropertyEditor Setting="@Setting" OnValidSubmit="Update">
    <Fields>
        @if (Setting != null)
        {
            <hr />

            <div class="dosc-form-item centered" style="flex-direction:column;">
                <label><b>Final Address: </b><span> @GetFullAddress()  </span></label>
            </div>
            <div class="dosc-form-item">
                <label>Address :</label>
                <InputText type="search" @bind-Value=Setting.OscAddress placeholder="@Setting.Name" clearable="true" />
            </div>
            <div class="dosc-form-item">
                <label> Is Avatar Parameter: </label>
                <ValidationMessage For="@(() => Setting.IsAvatarParameter)" />
                <InputRadioGroup @bind-Value="Setting.IsAvatarParameter">
                    <div class="dosc-form-row">
                        <div class="dosc-form-item item-row">
                            <InputRadio id="radio-AP1" Value="true" checked="checked" />
                            <label for="radio-AP1">Yes</label>
                        </div>

                        <div class="dosc-form-item item-row">
                            <InputRadio id="radio-AP2" Value="false" />
                            <label for="radio-AP2">No</label>
                        </div>
                    </div>
                </InputRadioGroup>
            </div>
            



            <hr />
            <div class="dosc-form-item">
                <label> Write Numeric as Float: </label>
                <ValidationMessage For="@(() => Setting.WriteAsFloat)" />
                <InputRadioGroup @bind-Value="Setting.WriteAsFloat">
                    <div class="dosc-form-row">
                        <div class="dosc-form-item item-row">
                            <InputRadio id="radio-NAF1" Value="true" checked="checked" />
                            <label for="radio-NAF1">Yes</label>
                        </div>

                        <div class="dosc-form-item item-row">
                            <InputRadio id="radio-NAF2" Value="false" />
                            <label for="radio-NAF2">No</label>
                        </div>
                    </div>
                </InputRadioGroup>
            </div>
            @if (Node?.NodeClass == "OSCWriteNode")
            {
                <hr />
                <label><b>Chat Options: </b></label>

                <div class="dosc-form-row">
                    <div class="dosc-form-item">
                        <label> Send Message Speed: </label>
                        <ValidationMessage For="@(() => Setting.SendChatMessageImmediately)" />
                        <InputRadioGroup @bind-Value="Setting.SendChatMessageImmediately">
                            <div class="dosc-form-row">
                                <div class="dosc-form-item item-row">
                                    <InputRadio id="radio-CMI1" Value="true" checked="checked" />
                                    <label for="radio-CMI1">Instant</label>
                                </div>

                                <div class="dosc-form-item item-row">
                                    <InputRadio id="radio-CMI2" Value="false" />
                                    <label for="radio-CMI2">Show Typing</label>
                                </div>
                            </div>
                        </InputRadioGroup>
                    </div>
                    <div class="dosc-form-item">
                        <label> Send With Sound: </label>
                        <ValidationMessage For="@(() => Setting.SendChatMessageWithSound)" />
                        <InputRadioGroup @bind-Value="Setting.SendChatMessageWithSound">
                            <div class="dosc-form-row">
                                <div class="dosc-form-item item-row">
                                    <InputRadio id="radio-CMS1" Value="true" checked="checked" />
                                    <label for="radio-CMS1">Yes</label>
                                </div>

                                <div class="dosc-form-item item-row">
                                    <InputRadio id="radio-CMS2" Value="false" />
                                    <label for="radio-CMS2">No</label>
                                </div>
                            </div>
                        </InputRadioGroup>
                    </div>
                </div>
            }
            


        }



    </Fields>
</NodePropertyEditor>



@code {
    [CascadingParameter]
    public BaseNode? Node { get; set; }
    private NodeSetting? Setting;

    [Parameter] public EventCallback Updated { get; set; }

    protected override void OnParametersSet()
    {
        if (Node != null)
        {
            Setting = new NodeSetting(Node);
        }
    }
    private string GetFullAddress() => string.Join('/', $"{(Setting!.IsAvatarParameter ? "/avatar/parameters" : string.Empty)}", Setting.OscAddress);

    private class NodeSetting : BaseNodeSetting
    {
        [Required]
        public bool IsAvatarParameter { get; set; }
        [Required]
        public string OscAddress { get; set; }
        [Required]
        public bool WriteAsFloat { get; set; }
        [Required]
        public bool SendChatMessageImmediately { get; set; } 
        [Required]
        public bool SendChatMessageWithSound { get; set; } 

        public NodeSetting(BaseNode Node)
        {
            IsAvatarParameter = Node.Properties.GetProperty<bool>(EntityProperty.IsAvatarParameter);
            OscAddress = Node.Properties.GetProperty<string>(EntityProperty.OSCAddress);
            WriteAsFloat = Node.Properties.GetProperty<bool>(EntityProperty.WriteAsFloat);
            if (Node.NodeClass== "OSCWriteNode")
            {
                SendChatMessageImmediately = Node.Properties.GetProperty<bool>(EntityProperty.SendChatMessageImmediately);
                SendChatMessageWithSound = Node.Properties.GetProperty<bool>(EntityProperty.SendChatMessageWithSound);
            }
            // Required
            DisplayName = Node.DisplayName;
            Name = Node.Name;
        }
    }

    public void Update(BaseNodeSetting setting)
    {
        var updatedSettings = (NodeSetting)setting;

        if (Node != null)
        {
            Node.DisplayName = updatedSettings.DisplayName;
            if (Node.NodeClass == "OSCWriteNode")
            {
                Node.Properties.SetProperty(EntityProperty.SendChatMessageImmediately, updatedSettings.SendChatMessageImmediately);
                Node.Properties.SetProperty(EntityProperty.SendChatMessageWithSound, updatedSettings.SendChatMessageWithSound);
            }
            Node.Properties.SetProperty(EntityProperty.WriteAsFloat, updatedSettings.WriteAsFloat);
            Node.Properties.SetProperty(EntityProperty.IsAvatarParameter, updatedSettings.IsAvatarParameter);
            Node.Properties.SetProperty(EntityProperty.OSCAddress, updatedSettings.OscAddress);
        }

        if (Updated.HasDelegate)
        {
            Updated.InvokeAsync();
        }
    }

}