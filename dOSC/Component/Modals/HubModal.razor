@using dOSC.Client.Models.Commands
@using dOSC.Drivers
@using dOSC.Drivers.Hub;

@implements IDisposable

<ModalV2 @ref="Modal" Title="Hub Communications" Size="ModalV2.ModalSize.Full" Icon="icon-satellite-dish" OnClose="Dispose">
    <Body>
        <div class="hub-log-container">
            <div class="hub-log-header">
                <div class="hub-log-header-title">
                    <div class="filter-icon @(!string.IsNullOrEmpty(_logFilter) ? "icon-filter" : "icon-filter-filled")"></div>
                    Logs ( <div class="logsize">@FilteredLogs.Count()</div> / @Hub.GetMaxLogHistory() )
                </div>
                <div class="hub-log-header-search">
                    <input type="text" class="hub-log-header-search-input" placeholder="Search" @oninput="@HandleLogInput" />
                </div>
                <div class="hub-log-action-group">
                    <div class="hub-log-header-action" @onclick="TogglePause">
                        <div class="hub-log-header-action-icon @(_paused ? "icon-pause" : "icon-play")"></div>
                        <div class="hub-log-header-action-text">@(_paused ? "Paused" : "Listening")</div>
                    </div>
                    <div class="hub-log-header-action" @onclick="ClearLogs">
                        <div class="hub-log-header-action-icon icon-trash"></div>
                        <div class="hub-log-header-action-text">Clear</div>
                    </div>
                </div>
            </div>
            <div id="hub-log" @ref=@_hubLogContainer @onwheel="OnScroll">
                <table>
                    <thead>
                        <tr>
                            <th>Level</th>
                            <th>Timestamp</th>
                            <th>Origin</th>
                            <th>Message</th>
                        </tr>
                    </thead>
                    <tbody>
                        <Virtualize Items="FilteredLogs" Context="log">
                            <tr>
                                <td><div class="hub-log-item-severity @log.Level.ToString().ToLower()"> @log.Level.ToString() </div></td>
                                <td>@log.TimeStamp</td>
                                <td>@log.Origin</td>
                                <td>@log.Message</td>
                            </tr>
                        </Virtualize>
                    </tbody>
                </table>
            </div>
            <div class="hub-log-floating-button @(_autoScroll ? string.Empty: "active")" @onclick="ToggleAutoScroll">
                <span class="icon-arrow-big-down-dash"></span> Auto-Scroll
            </div>
        </div>
    </Body>
</ModalV2>

@code
{
    [Inject] private HubService Hub { get; set; }
    [Inject] private IJSRuntime JS { get; set; }
    private ModalV2 Modal { get; set; }

    private readonly object _logsLock = new();
    private Queue<Log> _logs = new();

    private List<Log> GetFilteredLogs()
    {
        List<Log> logsSnapshot;
        lock (_logsLock)
        {
            logsSnapshot = _logs.ToList();
        }
        return logsSnapshot.Where(LogFilter).ToList();
    }

    private List<Log> _filteredLogs;
    private List<Log> FilteredLogs => _filteredLogs ??= GetFilteredLogs();

    private bool _paused = false;
    private string _logFilter = string.Empty;
    private bool _autoScroll = true;

    private ElementReference _hubLogContainer;

    private void HandleLogInput(ChangeEventArgs e)
    {
        _logFilter = e.Value.ToString();
        InvalidateFilteredLogs();
    }

    private void InvalidateFilteredLogs()
    {
        _filteredLogs = null;
        InvokeAsync(StateHasChanged);
    }

    private void ToggleAutoScroll()
    {
        _autoScroll = !_autoScroll;
    }

    private void ClearLogs()
    {
        lock (_logsLock)
        {
            _logs.Clear();
        }
        InvalidateFilteredLogs();
    }

    private void TogglePause()
    {
        _paused = !_paused;
        if (!_paused)
        {
            SyncLogs();
        }
        StateHasChanged();
    }

    private void SyncLogs()
    {
        lock (_logsLock)
        {
            _logs.Clear();
            foreach (var log in Hub.GetLogs())
            {
                _logs.Enqueue(Copy(log));
            }
        }
        InvalidateFilteredLogs();
    }

    private bool LogFilter(Log log)
    {
        var filterParts = _logFilter.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return filterParts.All(part => log.Message.Contains(part, StringComparison.OrdinalIgnoreCase)
                                        || log.Origin.Contains(part, StringComparison.OrdinalIgnoreCase)
                                        || log.Level.ToString().Contains(part, StringComparison.OrdinalIgnoreCase));
    }

    private Log Copy(Log log) => new()
    {
        Level = log.Level,
        Message = log.Message,
        Origin = log.Origin,
        TimeStamp = log.TimeStamp,
        Details = log.Details,
        Type = log.Type
    };

    private void OnScroll()
    {
        _autoScroll = false;
        StateHasChanged();
    }

    private async void OnLogReceived(Log log)
    {
        if (_paused) return;

        lock (_logsLock)
        {
            _logs.Enqueue(Copy(log));
            while (_logs.Count > Hub.GetMaxLogHistory())
            {
                _logs.Dequeue();
            }
        }

        InvalidateFilteredLogs();
    }

    public void Dispose()
    {
        Hub.LogReceived -= OnLogReceived;
        _paused = true;
        _autoScroll = false;
    }

    public async void Show()
    {
        Modal.Open();
        _paused = false;
        _autoScroll = true;
        SyncLogs();
        Hub.LogReceived += OnLogReceived;
    }

    public void Hide() => Modal.Close();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_autoScroll)
        {
            await JS.InvokeVoidAsync("scrollToBottom", _hubLogContainer);
        }
    }
}