<div class="dOSC-wiresheet-toolbar-item @(Disabled ? "disabled": string.Empty)  @( _isDropDownOpen || (Active ??  false) ? "active" : string.Empty)" tabindex="0" @onfocusout="HandleFocusOut" style="@CSSStyle" @onclick="HandleOnClick">
    @if (!string.IsNullOrEmpty(Icon))
    {
        <i class="dOSC-wiresheet-toolbar-item-icon @Icon"></i>
    }
    @if (!string.IsNullOrEmpty(Label))
    {
        <span> @Label </span>
    }
    @if (DropdownContent != null)
    {
        <div class="dOSC-wiresheet-toolbar-dropdown">

            @DropdownContent

        </div>
    }
    
    
</div>

@code{
    
    [Parameter] public string Icon { get; set; } = string.Empty;
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public string CSSStyle { get; set; } = string.Empty;
    [Parameter] public RenderFragment? DropdownContent { get; set;} 
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool? Active { get; set; } = null;
    private bool _isDropDownOpen = false;
    
    private void HandleOnClick()
    {
        OnClick.InvokeAsync();
        if (Active != null)
        {
            Active = !Active;
        }
        else
        {
            _isDropDownOpen = !_isDropDownOpen;
        }
    }
    
    private void HandleFocusOut(FocusEventArgs e)
    {
        if (_isDropDownOpen)
        {
            _isDropDownOpen = false;
            StateHasChanged(); // Request a re-render
        }
    }
}