

@if (HideTooltip || Disabled)
{
    <div class="wiresheet-toolbar-badge @(Disabled? "disabled" : string.Empty ) @(Visible? "visible" : string.Empty)" @onclick="Clicked">
        <i class="@Icon"></i>
    </div>
}
else
{
    <span data-toggle="tooltip" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="@ToolTipText">
        <div class="wiresheet-toolbar-badge @($"{GetBadgeColor()}")  @(Disabled? "disabled" : string.Empty ) @(Visible? "visible" : string.Empty)" @onclick="Clicked">
            <i class="@Icon"></i>
        </div>
    </span>
}

@code {
    [Parameter] public string Icon { get; set; } = "fa-solid fa-square";
    [Parameter] public string ToolTipText { get; set; } = string.Empty;
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool Visible { get; set; } = true;
    [Parameter] public bool HideTooltip { get; set; } = false;
    [Parameter] public BadgeColor Color { get; set; } = BadgeColor.None;
    
    [Inject] private IJSRuntime Js { get; set; } = default!;
    
    private void Clicked()
    {
        if (Disabled)
        {
            return;
        }
        OnClick.InvokeAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await Js.InvokeVoidAsync("addTooltips");
            }
            catch 
            {
                //ignore
            }
        }
    
    }

    private string GetBadgeColor()
    {
        switch (Color)
        {
            case BadgeColor.Primary:
                return "badge-color-primary";
            case BadgeColor.Secondary:
                return "badge-color-secondary";
            default:
                return string.Empty;
        }
    }
    

    public enum BadgeColor
    {
        None,
        Primary,
        Secondary
    }
}