
<div class="dropdown-container"  @ref="dropdownRef">
    <div class="dropdown-header" @onclick="ToggleDropdown">
        @if (!Items.Any())
        {
            <span class="dropdown-placeholder">No items to select</span>
        }
        else
        {
            @if (string.IsNullOrEmpty(SelectedItem))
            {
                <span class="dropdown-placeholder">Select an item...</span>
            }
            else
            {
                <span class="dropdown-selected">@SelectedItem</span>
            }
            @if (Items.Any())
            {
                <span class="dropdown-arrow">@((_isDropdownOpen) ? "▲" : "▼")</span>
            }
        }
    </div>

    @if (_isDropdownOpen && Items.Any())
    {
        
        
        
        <div class="dropdown-list" @onwheel:preventDefault @onwheel:stopPropagation>
           
            <div class="dropdown-item-search">
                <input type="search" @bind="@SearchPhrase" placeholder="Search" @oninput="SearchItems" />
            </div>
            <div class="dropdown-list-container">
                
                @foreach (var item in Items.Where(x => Filter(x)))
                {
                    <div class="dropdown-item" @onclick="() => SelectItem(item)">
                        @item
                    </div>
                }
            </div>
        </div>
    }
</div>


@code {
    private bool _isDropdownOpen = false;
    
    [Parameter]
    public List<string> Items { get; set; } = new List<string>();

    [Parameter] public string SelectedItem { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> SelectedItemChanged { get; set; }

    private ElementReference dropdownRef;

    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    
    private void ToggleDropdown()
    {
        SearchPhrase = string.Empty;
        _isDropdownOpen = !_isDropdownOpen;
        
        if (_isDropdownOpen)
        {
            // Reattach listener if dropdown is reopened
            JSRuntime.InvokeVoidAsync("customDropdown.setupOutsideClickListener", dropdownRef, DotNetObjectReference.Create(this));
        }
    }

    private void SelectItem(string item)
    {
        SelectedItem = item;
        _isDropdownOpen = false;
        SelectedItemChanged.InvokeAsync(item);
    }

    private string SearchPhrase = string.Empty;
    private void SearchItems(ChangeEventArgs e)
    {
        SearchPhrase = e.Value.ToString();
        StateHasChanged();
    }
    private bool Filter(string item)
    {
        if (string.IsNullOrEmpty(SearchPhrase))
        {
            return true;
        }
        return item.ToLower().Contains(SearchPhrase.ToLower());        
    }
    
    
    [JSInvokable]
    public void CloseDropdown()
    {
        _isDropdownOpen = false;
        StateHasChanged();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("customDropdown.setupOutsideClickListener", dropdownRef, DotNetObjectReference.Create(this));
        }
    }
}
