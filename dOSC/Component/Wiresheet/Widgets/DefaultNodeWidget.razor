@using dOSC.Component.Wiresheet.Nodes.Logic
@using dOSC.Component.Wiresheet.Nodes
@using Blazor.Diagrams.Components.Renderers
@using dOSC.Component.Wiresheet.Nodes.Utility
@using DynamicData
@using LiveSheet.Parts.Nodes
@implements IDisposable

<div id="@Nodes.Guid" class="node node-category-@(Nodes.Category.ToString().ToLower()) @(Nodes.HasError ? "error" : string.Empty)  @(Nodes.Selected ? "selected" : string.Empty)">
    <NodeWidgetHeader Node="@Nodes"/>
    <div class="node-body">
        <div class="node-port-container">
            @foreach(var port in Nodes.GetInputPorts())
            {
                <div class="node-port input">
                    <PortRenderer Port="@port" class="@port.PortType.ToString()" />
                    <div class="port-label">
                        @port.Name
                    </div>
                </div>
            }
        </div>
        <div class="node-content">
            <div>Test</div>
        </div>
        <div class="node-port-container">
            @foreach(var port in Nodes.GetOutputPorts())
            {
                <div class="node-port output">
                    <div class="port-label">
                        @port.Name
                    </div>
                    <PortRenderer Port="@port" class="@port.PortType.ToString()">
                        <div class="node-port-value">
                            @Nodes.GetDisplayValue()
                        </div>
                    </PortRenderer>
                    
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public WiresheetNode Nodes { get; set; } = new();

    protected override void OnInitialized()
    {
        Nodes.ErrorOccured += ErrorOccured;
    }

    private void ErrorOccured(LiveNode obj) => InvokeAsync(StateHasChanged);
    
    public void Dispose()
    {
        Nodes.ErrorOccured -= ErrorOccured;
    }

}